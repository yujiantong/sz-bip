<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/task 
		http://www.springframework.org/schema/task/spring-task-3.2.xsd"> 

	<context:component-scan base-package="com.bofide">
		<!--  <context:exclude-filter expression="org.springframework.stereotype.Controller"
			type="annotation" />-->
	</context:component-scan>
	

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:system.properties" />
	 <!-- 扫描文件（自动将servicec层注入） -->   
    
	
    
	<!-- 配置数据源 -->
	<!-- 数据源，使用dbcp -->
	<!-- 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="10" />
		<property name="maxIdle" value="5" />
	</bean>
	 -->
	 
	 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${jdbc.url}" />
      <property name="username" value="${jdbc.username}" />
      <property name="password" value="${jdbc.password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="1" />
      <property name="minIdle" value="1" /> 
      <property name="maxActive" value="20" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="60000" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="true" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" />
</bean>

	<!-- sqlSessinFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml" />
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- mapper配置 MapperFactoryBean：根据mapper接口生成代理对象 -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		mapperInterface指定mapper接口 <property name="mapperInterface" value="cn.itcast.ssm.mapper.UserMapper"/> 
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/> </bean> -->
	<!-- mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册 遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录 
		中 自动扫描出来的mapper的bean的id为mapper类名（首字母小写） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描的包名 如果扫描多个包，每个包中间使用半角逗号分隔 -->
		<property name="basePackage" value="com.bofide.bip.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />

	</bean>

	<!-- 由spring管理mybatis的事物 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 定义拦截器，用来指定事物属性，级别，和异常处理 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行; PROPAGATION_MANDATORY: 
					使用当前事务, 如果没有, 则抛出异常; PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; P ROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 
					如果当前有事务, 则挂起; PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常; +/-Exception</prop> 
					+ 表示异常出现时事物提交 - 表示异常出现时事务回滚 -->
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="del*"> PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="system*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean>

	<!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->
	<bean id="BeanProxy"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<!-- 对类名*Service结尾的类进行代理 -->
			<value>*Service</value>
		</property>
		<!-- 对代理类进行加载拦截器(实现通知的过程) -->
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	<!-- 定时任务开始 -->
	<bean id="assignController" class="com.bofide.bip.controller.AssignController"></bean>
	<task:scheduled-tasks>     
        <task:scheduled ref="assignController" method="systemAssignRenewalCustomer" cron="${systemAssignRenewalCustomer.time}"/>
       <!--  <task:scheduled ref="assignCustomer" method="updateTraceStatuOnTime" cron="${updateTraceStatuOnTime.time}"/>
        <task:scheduled ref="assignCustomer" method="insuranceDateStatuOnTime" cron="${insuranceDateStatuOnTime.time}"/>                -->
	</task:scheduled-tasks>
	
	<!-- 系统定时发送营销短信 -->
	<bean id="smsTemplateController" class="com.bofide.bip.controller.SmsTemplateController"></bean>
	<task:scheduled-tasks>     
        <task:scheduled ref="smsTemplateController" method="timingSMS" cron="${sms.time}"/>
	</task:scheduled-tasks>
	
	<bean id="CustomerController" class="com.bofide.bip.controller.CustomerController"></bean>
	<task:scheduled-tasks>     
        <task:scheduled ref="customerController" method="maintenanceBSP" cron="${maintenance.time}"/>
	</task:scheduled-tasks>
  
</beans>